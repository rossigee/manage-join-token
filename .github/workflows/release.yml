---
name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Trigger on tags with semantic versioning

env:
  APP_NAME: 'manage-join-token'
  APP_VERSION: '1.0.0'
  MAINTAINER: 'rossigee'
  DESC: 'manage-join-token maintains a current cluster join token as a Vault secret.'

jobs:
  build:
    runs-on: ubuntu-24.04-arm # Quicker!

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Create distribution tarball
        run: |
          [ -d dist ] || mkdir dist
          (
            tar czf dist/"${{ env.APP_NAME }}-${{ env.APP_VERSION }}.tar.gz" \
              README.md \
              LICENSE \
              manage-join-token \
              debian \
              systemd 
            ls -lah dist/*
          )
        shell: bash

      - name: Upload distribution tarball
        uses: actions/upload-artifact@v4
        with:
          name: artifact-tarball
          path: |
            dist/*.tar.gz

      - name: Build DEB packages
        run: |
          sudo apt-get install -y build-essential debhelper
          dpkg-buildpackage && (
            mkdir -p artifacts
            mv ../*.deb ../*.changes ../*.dsc ../*.tar.gz ./artifacts
            ls -l ./artifacts
          )

      - name: Upload DEB artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-deb
          path: artifacts/*.deb

  create-release:
    runs-on: ubuntu-24.04-arm # Quicker!

    permissions:
      contents: write
      actions: write
      attestations: write

    needs:
      - build

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Generate changelog
        run: |
          (cd /tmp; go install -v github.com/git-chglog/git-chglog/cmd/git-chglog@latest)
          git-chglog --output ./changelog $(git describe --tags $(git rev-list --tags --max-count=1))

      - name: Create release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          name: '${{ env.APP_NAME }}-v${{ env.APP_VERSION }}'
          tag_name: '${{ env.APP_NAME }}-v${{ env.APP_VERSION }}'
          body_path: ./changelog
          generate_release_notes: true
          append_body: true

      - name: Save artifact upload URL
        run: echo '${{ steps.create-release.outputs.upload_url }}' > upload_url.txt

      - name: Record artifact upload URL
        uses: actions/upload-artifact@v4
        with:
          name: create-release
          path: upload_url.txt

  upload-release:
    runs-on: ubuntu-24.04-arm # Quicker!

    permissions:
      contents: write
      actions: write
      attestations: write

    needs: create-release

    steps:
      - name: Retrieve release information
        uses: actions/download-artifact@v4
        with:
          name: create-release

      - name: Determine upload URL variable
        id: bin-vars
        run: |
          echo "upload_url=$(cat upload_url.txt)" >> $GITHUB_OUTPUT
          echo "asset_name=${{ env.APP_NAME }}-${{ env.APP_VERSION }}.tar.gz" >> $GITHUB_OUTPUT
          echo "asset_content_type=application/gzip" >> $GITHUB_OUTPUT

      - name: Retrieve tarball artifact
        id: download-tarball
        uses: actions/download-artifact@v4
        with:
          name: artifact-tarball

      - name: Upload tarball artifact to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ github.token }}'
        with:
          upload_url: ${{ steps.bin-vars.outputs.upload_url }}
          asset_path: ${{ steps.bin-vars.outputs.asset_name }}
          asset_name: ${{ steps.bin-vars.outputs.asset_name }}
          asset_content_type: ${{ steps.bin-vars.outputs.asset_content_type }}

      - name: Retrieve debian distribution artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact-deb-${{ matrix.os }}-${{ matrix.arch }}

      - name: Determine debian distribution asset name and path
        id: deb-vars
        run: |
          echo "upload_url=$(cat upload_url.txt)" >> $GITHUB_OUTPUT
          echo "asset_name=${{ env.APP_NAME }}_${{ env.APP_VERSION }}-1_${{ matrix.arch }}.deb" >> $GITHUB_OUTPUT
          echo "asset_content_type=application/vnd.debian.binary-package" >> $GITHUB_OUTPUT

      - name: Upload tarball assets to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ github.token }}'
        with:
          upload_url: ${{ steps.deb-vars.outputs.upload_url }}
          asset_path: ${{ steps.deb-vars.outputs.asset_name }}
          asset_name: ${{ steps.deb-vars.outputs.asset_name }}
          asset_content_type: ${{ steps.deb-vars.outputs.asset_content_type }}
